(module test (run-all)
  (import trie r5rs chicken)

  (define (run-all)
    (test1)
    (test2)
    (test3)
    (test4))

  (define (test1)
    (define trie (mk-trie))
    (assert (equal? #f (search-string "string" trie)))
    (assert (equal? #t (search-string "" trie))))

  (define (test2)
    (define trie (mk-trie))
    (insert-string! "string" trie)
    (assert (equal? #t (search-string "string" trie)))
    (assert (equal? #t (prefix-string? "string" trie)))
    (assert (equal? #f (search-string "str" trie)))
    (assert (equal? #t (prefix-string? "str" trie)))
    (assert (equal? #f (prefix-string? "stra" trie)))
    (assert (equal? #f (search-string "string " trie)))
    (assert (equal? #f (search-string "notpresent" trie))))

  (define (test3)
    (define trie (mk-trie))
    (insert-string! "string1" trie)
    (insert-string! "string2" trie)
    (insert-string! "anotherstring" trie)
    (assert (equal? #t (search-string "string1" trie)))
    (assert (equal? #t (search-string "string2" trie)))
    (assert (equal? #t (search-string "anotherstring" trie)))
    (assert (equal? #f (search-string "another string" trie)))
    (assert (equal? #f (search-string "string3" trie))))

  (define (test4)
    (define trie (mk-trie))
    (insert! '(#\s #\t #\r #\i #\n #\g) trie)
    (assert (equal? #t (search-string "string" trie)))
    (assert (equal? #f (search-string "notpresent" trie)))
    (assert (equal? #f (search '(n o t i n) trie)))
    (assert (equal? #f (search '(#\n #\o #\t) trie)))
    (assert (equal? #f (search '(s t r i n g) trie)))
    (assert (equal? #t (search '(#\s #\t #\r #\i #\n #\g) trie))))

)

